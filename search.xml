<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo搭建遇到的问题及优化]]></title>
    <url>%2F2018%2F08%2F09%2Fhexo%E6%90%AD%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[前言终于有了一个整理自己学习笔记的地方了，之前用过印象笔记，觉得它的markdown格式处理得不是很完美，复制粘贴出来总是格式不对。后来又用过jupyter_nootboke，但是不方便在其它客户端查看。折腾了半天终于弄好了期间遇到过不少坑，发现hexo有时候同一样的问题总是对应着几种不同的解决方法，在此整理一下以便之后遇到问题。 关于问题NexT这里使用了next主题，这个主题特别简洁，还有很多易用性的扩展，尤其侧边栏的快速定位，让我爱不释手。 头像不显示开始按照_config.yml中所说把avatar.gif放到blog-site/source/下，没有任何的作用。后来发现是主题的原因，放到themes/next/source/images/下就好了，默认的头像是正方形的，这里修改了一下代码把它改成圆形，文件位置在themes/next/source/css_common_components/sidebar/sidebar-author.styl 1234567891011121314.site-author-image &#123; display: block; margin: 0 auto; max-width: 96px; height: auto; border: 2px solid #333; padding: 2px; /* start*/ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* end */&#125; 网页图标favicon.ico不显示这里也是因为Next的原因，把favicon.ico放到themes/next/source/images/下，然后修改_config.yml中favicon: /images/favicon.ico解决了问题。这里介绍一个很方便转换ico的网站favicon在线制作。 没有建立资源文件夹 设置post_asset_foler: true之后执行hexo new post_name后没有建立资源文件夹。搜索没有查到相关记录，后来想到之前next主题设置时，把配置文件拆分了出来，这样每次执行hexo clean/generate的时候在后面加了参数--config指定了配置文件。但是这样修改的文件对于hexo new post_name来说是没有修过的，所以要在source/_config.yml修改这项参数。 之后没有选择官方的标签插件是因为，在编辑markdown时无法看到预览效果所以安装npm install https://github.com/CodeFalling/hexo-asset-image --save，在文章中使用markdown语法引用![logo](&lt;title_name&gt;/a.png)使用。 选择官方的标签插件引用图片。 关于优化在右上角或者左上角实现fork me on github在这里选择喜欢的样式。这里选择的是 1&lt;a href=&quot;https://your-url&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on Github&quot;&gt;&lt;svg width=&quot;80&quot; height=&quot;80&quot; viewBox=&quot;0 0 250 250&quot; style=&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; style=&quot;transform-origin: 130px 106px;&quot; class=&quot;octo-arm&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; 将其粘贴到themes/next/layout/_layout.swig中，放在div class=&quot;headhand&quot;&gt;&lt;/div&gt;下面。 修改文章底部的那个带#号的标签修改模板/themes/next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将#换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 侧边栏社交小图标设置在配置文件搜索social_icons，把值换成喜欢的图标名字，这里列出了图标库 在网站底部加上访问量打开/themes/next/layout/_partials/footer.swig文件添加红框内的代码 1&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 添加统计代码如下位置12345&lt;div class=&quot;powered-by&quot;&gt;&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; 网站底部字数统计根目录安装npm install hexo-wordcount --save然后再/themes/next/layout/_partials/footer.swig文件最后加上 1234&lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; 添加顶部加载条_config.yml设置中pace:true 在文章底部增加版权信息在目录themes/next/layout/_macro/下添加my-copyright.swig: 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录themes/next/source/css/_common/components/post/下添加my-post-copyright.styl: 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改/themes/next/layout/_macro/post.swig在如下位置 添加代码：(注意和之前的教程不一样，这里可能是next的更新了，所以要把代码放到外面，否则在wechat_subscriber未开启时会导致失效。) 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 修改themes/next/source/css/_common/components/post/post.styl末尾增加一行1@import &quot;my-post-copyright&quot; 博文置顶替换node_modules/hexo-generator-index/lib/generator.js所有的代码为： 12345678910111213141516171819202122232425262728&apos;use strict&apos;;var pagination = require(&apos;hexo-pagination&apos;);module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || &apos;page&apos;; return pagination(&apos;&apos;, posts, &#123; perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: &#123; __index: true &#125; &#125;);&#125;; 使用：在头部添加top 12345678---title: date: 2017-05-22 22:45:48tags: 技巧categories: 技巧copyright: truetop: 100--- 修改字体大小/themes/next/source/css/_variables/base.styl搜索font-size-base 设置阅读次数添加阅读量统计 添加搜索12local_search: enable: true]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python interview]]></title>
    <url>%2F2018%2F08%2F08%2FPython-interview%2F</url>
    <content type="text"><![CDATA[interator tips:从Python3.4开始，检查对象x是否迭代，最准确的方法是调用iter(x)函数，如果不可迭代，再处理TypeErro异常。这比isinstance(x, abc.iterable)更准确，因为iter(x)函数会考虑到__getitem__方法，而abc.Iterable类不考虑。 检查对象x是否是迭代器最好的方式是调用isinstance(x, abc.Iterator) Iterables vs Iterators如果对象实现了能返回迭代器的__iter__方法，那么对象就是可迭代的。序列都可以迭代，因为实现了__getitem__方法, 而且其参数是从零开始的索引，这种对象也可以迭代。 迭代器是这样的对象，实现了无参数的__next__方法，返回序列中的下一个元素，如果没有元素了，就抛出StopIteration异常，Python中的迭代器还实现了__iter__方法（必须return self），因此迭代器也可以迭代。 可迭代对象和迭代器之间的关系：Python从可迭代的对象中获取迭代器。 generator 生成器只要Python函数中的定义体中有yield关键字，该函数就是生成器函数。调用生成器函数，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。 所有的生成器都是迭代器，因为生成器完全实现了迭代器接口。 ArithmeticProgression Generator12345678def aritprog_gen(begin, step, end=None): result = type(begin + step)(begin) forever = end is None index = 0 while forever or result &lt; end: yield result index += 1 result = begin + step * index 123import itertoolsgen = itertools.takewhile(lambda n: n &lt; 3, itertools.count(1, .5))list(gen) [1, 1.5, 2.0, 2.5] Generator Functions n The Standard Library (filter)12def vowel(c): return c.lower() in 'aeiou' 1list(itertools.filterfalse(vowel, 'Aardvark')) # filter内置函数的反用 [&apos;r&apos;, &apos;d&apos;, &apos;v&apos;, &apos;r&apos;, &apos;k&apos;] 1list(itertools.dropwhile(vowel, 'Aardvark')) # 在条件为false之后的第一次, 返回迭代器中剩下来的项 [&apos;r&apos;, &apos;d&apos;, &apos;v&apos;, &apos;a&apos;, &apos;r&apos;, &apos;k&apos;] 1list(itertools.takewhile(vowel, 'Aardvark')) # 在vowel返回False时停止 [&apos;A&apos;, &apos;a&apos;] 1list(itertools.compress('Aardvark', (1, 0, 1, 1, 0, 1))) # 并行比较两个可迭代对象，如果后者元素为True, 产出前者的值 [&apos;A&apos;, &apos;r&apos;, &apos;d&apos;, &apos;a&apos;] 1list(itertools.islice('Aardvark', 1, 7, 2)) # 产出前者的切片，主要是惰性操作 [&apos;a&apos;, &apos;d&apos;, &apos;a&apos;] Generator Functions (map)1sample = [5,4,2,8,7,6,3,0,9,1] 1list(itertools.accumulate(sample)) [5, 9, 11, 19, 26, 32, 35, 35, 44, 45] 1list(itertools.accumulate(sample, min)) [5, 4, 2, 2, 2, 2, 2, 0, 0, 0] 12import operatorlist(itertools.accumulate(sample, operator.mul)) [5, 20, 40, 320, 2240, 13440, 40320, 0, 0, 0] 1list(map(operator.mul, range(11), [2, 4, 8])) [0, 4, 16] 1list(map(lambda a, b: (a, b), range(11), [2, 4, 8])) # zip built-in function does [(0, 2), (1, 4), (2, 8)] 1list(itertools.starmap(operator.mul, enumerate('albatroz', 1))) # [operator.mul(*('a', 1))] [&apos;a&apos;, &apos;ll&apos;, &apos;bbb&apos;, &apos;aaaa&apos;, &apos;ttttt&apos;, &apos;rrrrrr&apos;, &apos;ooooooo&apos;, &apos;zzzzzzzz&apos;] 1list(itertools.starmap(lambda a, b: b/a, enumerate(itertools.accumulate(sample), 1))) # average [5.0, 4.5, 3.6666666666666665, 4.75, 5.2, 5.333333333333333, 5.0, 4.375, 4.888888888888889, 4.5] Generator Functions (merging)1list(itertools.chain('ABC', range(2))) [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, 0, 1] 1list(itertools.chain(enumerate('ABC'))) # 传入一个参数，没什么卵用 [(0, &apos;A&apos;), (1, &apos;B&apos;), (2, &apos;C&apos;)] 1list(itertools.chain.from_iterable(enumerate('ABC'))) [0, &apos;A&apos;, 1, &apos;B&apos;, 2, &apos;C&apos;] 1list(zip('ABC', range(5), [10, 20, 30, 40])) [(&apos;A&apos;, 0, 10), (&apos;B&apos;, 1, 20), (&apos;C&apos;, 2, 30)] 1list(itertools.zip_longest('ABC', range(5), fillvalue='?')) [(&apos;A&apos;, 0), (&apos;B&apos;, 1), (&apos;C&apos;, 2), (&apos;?&apos;, 3), (&apos;?&apos;, 4)] Generator FUnctions (Cartesian)笛卡尔积1list(itertools.product('ABC', range(2))) [(&apos;A&apos;, 0), (&apos;A&apos;, 1), (&apos;B&apos;, 0), (&apos;B&apos;, 1), (&apos;C&apos;, 0), (&apos;C&apos;, 1)] 12suits = 'spades hearts diamonds clubs'.split()list(itertools.product('AK', suits)) [(&apos;A&apos;, &apos;spades&apos;), (&apos;A&apos;, &apos;hearts&apos;), (&apos;A&apos;, &apos;diamonds&apos;), (&apos;A&apos;, &apos;clubs&apos;), (&apos;K&apos;, &apos;spades&apos;), (&apos;K&apos;, &apos;hearts&apos;), (&apos;K&apos;, &apos;diamonds&apos;), (&apos;K&apos;, &apos;clubs&apos;)] 1list(itertools.product('ABC')) [(&apos;A&apos;,), (&apos;B&apos;,), (&apos;C&apos;,)] 1list(itertools.product('ABC', repeat=2)) [(&apos;A&apos;, &apos;A&apos;), (&apos;A&apos;, &apos;B&apos;), (&apos;A&apos;, &apos;C&apos;), (&apos;B&apos;, &apos;A&apos;), (&apos;B&apos;, &apos;B&apos;), (&apos;B&apos;, &apos;C&apos;), (&apos;C&apos;, &apos;A&apos;), (&apos;C&apos;, &apos;B&apos;), (&apos;C&apos;, &apos;C&apos;)] 1list(itertools.product('AB', range(2), repeat=2)) [(&apos;A&apos;, 0, &apos;A&apos;, 0), (&apos;A&apos;, 0, &apos;A&apos;, 1), (&apos;A&apos;, 0, &apos;B&apos;, 0), (&apos;A&apos;, 0, &apos;B&apos;, 1), (&apos;A&apos;, 1, &apos;A&apos;, 0), (&apos;A&apos;, 1, &apos;A&apos;, 1), (&apos;A&apos;, 1, &apos;B&apos;, 0), (&apos;A&apos;, 1, &apos;B&apos;, 1), (&apos;B&apos;, 0, &apos;A&apos;, 0), (&apos;B&apos;, 0, &apos;A&apos;, 1), (&apos;B&apos;, 0, &apos;B&apos;, 0), (&apos;B&apos;, 0, &apos;B&apos;, 1), (&apos;B&apos;, 1, &apos;A&apos;, 0), (&apos;B&apos;, 1, &apos;A&apos;, 1), (&apos;B&apos;, 1, &apos;B&apos;, 0), (&apos;B&apos;, 1, &apos;B&apos;, 1)] 一个元素产出多个值1list(itertools.islice(itertools.count(1, .3), 3)) [1, 1.3, 1.6] 12cy = itertools.cycle('ABC')next(cy) &apos;A&apos; 1list(itertools.islice(cy, 7)) [&apos;B&apos;, &apos;C&apos;, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;A&apos;, &apos;B&apos;] 12rp = itertools.repeat(7)next(rp), next(rp) (7, 7) 1list(itertools.repeat(8, 4)) [8, 8, 8, 8] 1list(map(operator.mul, range(11), itertools.repeat(5))) # 为map函数提供固定参数5 [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50] 1list(itertools.combinations('ABC', 2)) [(&apos;A&apos;, &apos;B&apos;), (&apos;A&apos;, &apos;C&apos;), (&apos;B&apos;, &apos;C&apos;)] 1list(itertools.combinations_with_replacement('ABC', 2)) [(&apos;A&apos;, &apos;A&apos;), (&apos;A&apos;, &apos;B&apos;), (&apos;A&apos;, &apos;C&apos;), (&apos;B&apos;, &apos;B&apos;), (&apos;B&apos;, &apos;C&apos;), (&apos;C&apos;, &apos;C&apos;)] 1list(itertools.permutations('ABC', 2)) [(&apos;A&apos;, &apos;B&apos;), (&apos;A&apos;, &apos;C&apos;), (&apos;B&apos;, &apos;A&apos;), (&apos;B&apos;, &apos;C&apos;), (&apos;C&apos;, &apos;A&apos;), (&apos;C&apos;, &apos;B&apos;)] 用于重新排列元素的生成器函数1list(itertools.groupby('LLLLAAGGG')) [(&apos;L&apos;, &lt;itertools._grouper at 0x108ad79e8&gt;), (&apos;A&apos;, &lt;itertools._grouper at 0x108ad7550&gt;), (&apos;G&apos;, &lt;itertools._grouper at 0x108ad7978&gt;)] 12for char, group in itertools.groupby('LLLLAAGGG'): print(char, '-&gt;', list(group)) L -&gt; [&apos;L&apos;, &apos;L&apos;, &apos;L&apos;, &apos;L&apos;] A -&gt; [&apos;A&apos;, &apos;A&apos;] G -&gt; [&apos;G&apos;, &apos;G&apos;, &apos;G&apos;] 123animals = ['duck', 'eagle', 'rat', 'giraffe', 'bear', 'bat', 'dolphin', 'shark', 'lion']animals.sort(key=len)animals [&apos;rat&apos;, &apos;bat&apos;, &apos;duck&apos;, &apos;bear&apos;, &apos;lion&apos;, &apos;eagle&apos;, &apos;shark&apos;, &apos;giraffe&apos;, &apos;dolphin&apos;] 12for length, group in itertools.groupby(animals, len): print(length, '-&gt;', list(group)) 3 -&gt; [&apos;rat&apos;, &apos;bat&apos;] 4 -&gt; [&apos;duck&apos;, &apos;bear&apos;, &apos;lion&apos;] 5 -&gt; [&apos;eagle&apos;, &apos;shark&apos;] 7 -&gt; [&apos;giraffe&apos;, &apos;dolphin&apos;] 12for length, group in itertools.groupby(reversed(animals), len): print(length, '-&gt;', list(group)) 7 -&gt; [&apos;dolphin&apos;, &apos;giraffe&apos;] 5 -&gt; [&apos;shark&apos;, &apos;eagle&apos;] 4 -&gt; [&apos;lion&apos;, &apos;bear&apos;, &apos;duck&apos;] 3 -&gt; [&apos;bat&apos;, &apos;rat&apos;] 1list(itertools.tee('ABC')) [&lt;itertools._tee at 0x108ad22c8&gt;, &lt;itertools._tee at 0x108ae4cc8&gt;] 1g1, g2 = itertools.tee('ABC') 1next(g1) &apos;A&apos; 1next(g2) &apos;A&apos; 1next(g2) &apos;B&apos; 1list(g1) [&apos;B&apos;, &apos;C&apos;] 1list(zip(*itertools.tee('ABC'))) [(&apos;A&apos;, &apos;A&apos;), (&apos;B&apos;, &apos;B&apos;), (&apos;C&apos;, &apos;C&apos;)] New Syntax in Python3.3: yield from123def chain(*iterables): for i in iterables: yield from i 1list(chain('ABBC', range(3))) [&apos;A&apos;, &apos;B&apos;, &apos;B&apos;, &apos;C&apos;, 0, 1, 2] yiled from 除了可以代替循环， 还会创建通道，把内层生成器直接与外层生成器的客户端联系起来。把生成器当成协程使用时，这个通道特别重要，不仅能为客户端代码生成值，还能使用客户端代码提供的值。 Iterable Reducing Functions (可迭代规约函数)1all([1, 0, 3]) False 1all([]) True 1any([1, 0, 3]) True 1any([]) False 12g = (n for n in [0, 0.0, 7, 8])any(g) True 1next(g) 8 iter 一个鲜为人知的用法传入两个参数，使用常规的函数或任何可调用的对象创建迭代器。第一个参数必须是可调用对象，用于不断调用产出各个值；第二个值是哨符，这个是标记值，当可调用的对象返回这个值时，出发迭代器抛出StropIteration异常 123from random import randintdef d6(): return randint(1, 6) 1d6_iter = iter(d6, 1) # 但是不会输出1 12for roll in d6_iter: print(roll) 3 4 2 有个实用的例子，逐行读取文件，直到遇到空行或达文件末尾为止：123with open('mydata.txt') as fp: for line in iter(fp.readline, ''): process_line(line) Iterator vs Generator 从接口上来看，迭代器协议定义了两个方法：__next__和__iter__。生成器对象实现了这两个方法，因此从这方面来看，所有的生成器都是迭代器。 从实现方式来看，生成器可以用yield或是生成器表达式。 从概念上来说，迭代器用于遍历集合，从中产出元素。生成器可能无需遍历集合就能生成值，如range函数 12345def fibonacci(): a, b = 0, 1 while True: yield a a, b = b, a+b]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
